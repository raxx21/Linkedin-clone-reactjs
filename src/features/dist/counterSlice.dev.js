"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.incrementIfOdd = exports.selectCount = exports.incrementByAmount = exports.decrement = exports.increment = exports.counterSlice = exports.incrementAsync = void 0;

var _toolkit = require("@reduxjs/toolkit");

var _counterAPI = require("./counterAPI");

var initialState = {
  value: 0,
  status: 'idle'
}; // The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

var incrementAsync = (0, _toolkit.createAsyncThunk)('counter/fetchCount', function _callee(amount) {
  var response;
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap((0, _counterAPI.fetchCount)(amount));

        case 2:
          response = _context.sent;
          return _context.abrupt("return", response.data);

        case 4:
        case "end":
          return _context.stop();
      }
    }
  });
});
exports.incrementAsync = incrementAsync;
var counterSlice = (0, _toolkit.createSlice)({
  name: 'counter',
  initialState: initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: function increment(state) {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: function decrement(state) {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: function incrementByAmount(state, action) {
      state.value += action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: function extraReducers(builder) {
    builder.addCase(incrementAsync.pending, function (state) {
      state.status = 'loading';
    }).addCase(incrementAsync.fulfilled, function (state, action) {
      state.status = 'idle';
      state.value += action.payload;
    });
  }
});
exports.counterSlice = counterSlice;
var _counterSlice$actions = counterSlice.actions,
    increment = _counterSlice$actions.increment,
    decrement = _counterSlice$actions.decrement,
    incrementByAmount = _counterSlice$actions.incrementByAmount; // The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

exports.incrementByAmount = incrementByAmount;
exports.decrement = decrement;
exports.increment = increment;

var selectCount = function selectCount(state) {
  return state.counter.value;
}; // We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


exports.selectCount = selectCount;

var incrementIfOdd = function incrementIfOdd(amount) {
  return function (dispatch, getState) {
    var currentValue = selectCount(getState());

    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };
};

exports.incrementIfOdd = incrementIfOdd;
var _default = counterSlice.reducer;
exports["default"] = _default;